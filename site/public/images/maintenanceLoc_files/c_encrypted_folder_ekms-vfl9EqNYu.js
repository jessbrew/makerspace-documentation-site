!function(){try{var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},n=(new e.Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]="06b19148-6f48-389b-b527-508cb871a979")}catch(e){}}();
define(["exports","./e_file_viewer_static_scl_page_folder","./c_api_v2_routes_password_confirmation_provider","./c_api_v2_routes_folders_info_provider"],(function(e,t,n,r){"use strict";function a(e){switch(e){case"HPKE_DHKEM_P256_HKDF_SHA256_HKDF_SHA256_AES256_GCM":return{".tag":"hpke_dhkem_p256_hkdf_sha256_hkdf_sha256_aes256_gcm"};case"SENDER_AUTH_HPKE_DHKEM_P256_HKDF_SHA256_HKDF_SHA256_AES256_GCM":return{".tag":"sender_auth_hpke_dhkem_p256_hkdf_sha256_hkdf_sha256_aes256_gcm"};default:return{".tag":"unknown_asymmetric_encryption_algorithm"}}}function i(e){switch(e[".tag"]){case"hpke_dhkem_p256_hkdf_sha256_hkdf_sha256_aes256_gcm":return"HPKE_DHKEM_P256_HKDF_SHA256_HKDF_SHA256_AES256_GCM";case"sender_auth_hpke_dhkem_p256_hkdf_sha256_hkdf_sha256_aes256_gcm":return"SENDER_AUTH_HPKE_DHKEM_P256_HKDF_SHA256_HKDF_SHA256_AES256_GCM";default:throw new t.AlgorithmNotFoundError}}function c(e){if("aes256_gcm_extras"===e[".tag"])return"AES256_GCM_EXTRAS";throw new t.AlgorithmNotFoundError}function o(e){const t=n.protoBase64.enc(e.keyData);return{algorithm:a(e.algorithm),key_data:t}}function y(e){const t=n.protoBase64.enc(e.encryptedPrivateKeyData);return{namespace_key_id:e.namespaceKeyId,encrypting_key_id:e.encryptingKeyId,encrypted_private_key_data:t}}function s(e){const t=n.protoBase64.enc(e.encryptedPrivateKeyData),r=n.protoBase64.enc(e.publicKeyData);return{algorithm:a(e.algorithm),encrypted_private_key_data:t,public_key_data:r}}function _(e){const t=n.protoBase64.dec(e.encrypted_private_key_data),r=n.protoBase64.dec(e.public_key_data);return{keyId:e.key_id,algorithm:i(e.algorithm),encryptedPrivateKeyData:t,publicKeyData:r,encryptingKeyId:e.encrypting_key_id}}function d(e){const t=n.protoBase64.dec(e.key_data);return{keyId:e.key_id,keyData:t,algorithm:i(e.algorithm)}}function p(e){return{fileKeys:e.file_keys.map((e=>function(e){const t=n.protoBase64.dec(e.encrypted_key_data);return{keyId:e.key_id,algorithm:c(e.algorithm),encryptedKeyData:t,encryptingKeyId:e.encrypting_key_id}}(e))),encryptingKeys:e.encrypting_keys.map((e=>_(e)))}}function u(e){return{appId:e.channel_id.app_id,uniqueId:e.channel_id.unique_id,rev:e.rev,token:e.token}}const l=()=>(new t.ActiveUserApiV2Client).ns("ekms");async function m(){const e=l();return d((await e.rpc("get_team_public_key",void 0,{})).team_key)}async function k(e,t){const n=l(),r=await n.rpc("get_namespace_keys",{ns_id:t,root_key_id:e},{});return(a=r).encrypted_keys?a.encrypted_keys.map((e=>_(e))):[];var a}async function f(){const e=l();return function(e){if(!e.enrollment_status)throw Error("No enrollment status in response");switch(e.enrollment_status[".tag"]){case"enrolled":return{status:"enrolled"};case"not_enrolled":if(!e.bolt_token)throw Error("No bolt token in response of not_enrolled team.");return{status:"not_enrolled",boltToken:u(e.bolt_token)};case"other":throw Error("Unknown team enrollment status")}}(await e.rpc("get_team_enrollment_status",{},{}))}class h{constructor(e){this.tag=e}}async function g(e,n){if(!t.createAsymmetricCoreCrypto(e.algorithm).senderAuthenticated()&&!n)return;if(!n)throw new h("missing_team_key_fingerprint");const r=await K(e);if(t.bytesToHexString(r)!==t.bytesToHexString(n))throw new h("invalid_team_key_fingerprint")}async function K(e){const r=`{".tag":"${e.algorithm.toLocaleLowerCase()}"}`,a=n.protoBase64.enc((new TextEncoder).encode(r)),i=n.protoBase64.enc(e.keyData),c=(new TextEncoder).encode(a+"|"+i);return t.sha256(c)}async function w(e,n,r,a){const i=await async function(e,t,n){return A(I(e),t,n)}(e,r,a),c=n.map((async e=>await async function(e,n){const r=e.find((e=>e.keyId===n.encryptingKeyId));if(r){const e=t.createAsymmetricCoreCrypto(r.algorithm),a=await e.decryptKey(n,r,r.publicKey);return{keyId:n.keyId,...a}}throw new t.NoKeyFoundError}(i,e)));return Promise.all(c).catch((e=>(t.encryptedFolderMetrics.ekmsLoadFileKeysFail(e,"Decrypt"),Promise.reject(e))))}async function A(e,n,r,a=0){const i=e.get(n.keyId);if(!i)return[];const c=await async function(e,n){return Promise.all(e.map((async e=>{const r=t.createAsymmetricCoreCrypto(n.algorithm),a=await r.decryptKeyPair(e,n,n.publicKey),i=t.createAsymmetricCoreCrypto(a.algorithm);return await i.validateKeyPair(a),{keyId:e.keyId,...a}})))}(i,n);if(0===a)for(const e of c)await g(e.publicKey,r);const o=await Promise.all(c.map((async t=>A(e,t,r,a+1))));return c.push(...[].concat(...o)),c}function I(e){const t=new Map;for(const n of e){const e=n.encryptingKeyId;t.has(e)?t.get(e).push(n):t.set(e,[n])}return t}const E=null;e.DefaultSender=E,e.LocalError=h,e.algorithmToAsymmetricEncryptionAlgorithmProto=a,e.assertExpectedTeamKeyFingerprint=g,e.createTeamKeyPair=async function(e){return t.createAsymmetricCoreCrypto(e?t.CURRENT_ASYM_ALGORITHM_SENDER_AUTH:t.CURRENT_ASYM_ALGORITHM).generateKeyPair()},e.enrollTeamKeyPair=async function(e,n){const r=t.createAsymmetricCoreCrypto(e.algorithm),a=await r.encryptKeyPair(n,e.publicKey,E);return{keyId:await async function(e,t){const n=l();return(await n.rpc("enroll_team",{encrypting_backup_key_id:e,team_key_pair:s(t)},{})).team_key.key_id}(e.keyId,a),...n}},e.fingerprint=K,e.fromProtoToPublicKey=d,e.getNamespaceKeyList=async function(e,t,n){const r=await k(t.keyId,e),a=r.filter((e=>e.encryptingKeyId!==t.keyId));return(await async function(e,t,n){const r=I(e);return await A(r,t,n)}(r,t,n)).filter((e=>void 0!==a.find((t=>t.keyId===e.keyId))))},e.getTeamEnrollmentStatus=async function(){return f()},e.getTeamKeyFromClientKey=async function(e,n){const a=await async function(e){const t=l();return(await t.rpc("get_encrypted_team_key_list_with_client_key",{client_key_id:e},{})).encrypted_team_keys.map(_)}(e.keyId);r.assert(1===a.length,"Expected exactly one team key");const i=a[0],c=t.createAsymmetricCoreCrypto(e.algorithm),o=await c.decryptKeyPair(i,e,E),y=t.createAsymmetricCoreCrypto(o.algorithm);return await y.validateKeyPair(o),await g(o.publicKey,n),{keyId:i.keyId,...o}},e.getUnverifiedTeamPublicKey=async function(){return m()},e.isKeyVerificationEnabled=async function(){const e=await m();return t.createAsymmetricCoreCrypto(e.algorithm).senderAuthenticated()},e.loadFileKeys=async function(e,n,r){const a=await async function(e,t){const n=l();return p(await n.rpc("get_file_keys",{root_key_id:e,file_key_ids:t},{}))}(n.keyId,e).catch((e=>(t.encryptedFolderMetrics.ekmsLoadFileKeysFail(e,"RPC"),Promise.reject(e))));return w(a.encryptingKeys,a.fileKeys,n,r)},e.registerBackupKey=async function(){const e=t.createAsymmetricCoreCrypto(t.CURRENT_ASYM_ALGORITHM),n=await e.generateKeyPair();return{keyId:(await async function(e){const t=l(),n=await t.rpc("register_backup_key",{backup_key:o(e)},{});return{...e,keyId:n.backup_key.key_id}}(n.publicKey)).keyId,...n}},e.registerClient=async function(e){return async function(e){const t=l(),n=await t.rpc("register_client",{client_key:o(e)},{});return n.bolt_token?{keyId:n.client_key.key_id,boltToken:u(n.bolt_token)}:{keyId:n.client_key.key_id}}(e)},e.shareNamespace=async function(e,n,r){return async function(e,t){const n=l();return await n.rpc("share_namespace",{ns_id:e,encrypted_namespace_keys:t.map(y)},{})}(e,(await Promise.all(r.map((async e=>{const r=t.createAsymmetricCoreCrypto(e.algorithm);if(r.senderAuthenticated())throw new h("not_supported_with_key_verification_enabled");return await Promise.all(n.map((t=>r.encryptKeyPair(t,e,E).then((n=>({namespaceKeyId:t.keyId,encryptingKeyId:e.keyId,encryptedPrivateKeyData:n.encryptedPrivateKeyData}))))))})))).flat())}}));
//# sourceMappingURL=c_encrypted_folder_ekms.js-vfl77TJSi.map

//# debugId=06b19148-6f48-389b-b527-508cb871a979